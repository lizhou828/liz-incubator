#定义日志信息的“输出级别”和“输出目的地”。
log4j.rootLogger=info,stdout,error

#配置日志信息输出目的地:控制台

log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.Threshold=debug
log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm s,SSS}:%5p [%t] (%C.%M:%L) - [%X{username} from %X{address}] %m%n



#配置日志信息输出目的地:文件（文件大小到达指定尺寸的时候产生一个新的文件）

log4j.appender.info=org.apache.log4j.RollingFileAppender
#消息输出到指定的info.log文件
log4j.appender.info.File=${catalina.home}/logs/mn_info.log
#指定日志消息的输出最低层次
log4j.appender.info.Threshold=INFO
#后缀可以是KB, MB 或者是 GB. 在日志文件到达该大小时，将会自动滚动，即将原来的内容移到info.log.1文件
log4j.appender.info.MaxFileSize=10MB
#指定可以产生的滚动文件的最大数
log4j.appender.info.MaxBackupIndex=30
log4j.appender.info.layout=org.apache.log4j.PatternLayout
log4j.appender.info.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm s,SSS}:%5p [%t] (%C.%M:%L) - [%X{username}] %m%n



#配置日志信息输出目的地:文件（文件大小到达指定尺寸的时候产生一个新的文件

log4j.appender.error=org.apache.log4j.RollingFileAppender
log4j.appender.error.File=${catalina.home}/logs/mn_error.log
log4j.appender.error.Threshold=ERROR
log4j.appender.error.MaxFileSize=10MB
log4j.appender.error.MaxBackupIndex=30
log4j.appender.error.layout=org.apache.log4j.PatternLayout
log4j.appender.error.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm s,SSS}:%5p [%t] (%C.%M:%L) -[%X{username}] %m%n

#log4j.appender.h2=org.apache.log4j.jdbc.H2JDBCAppender
#log4j.appender.h2.layout=org.apache.log4j.PatternLayout
#log4j.appender.h2.driver=org.h2.Driver
#log4j.appender.h2.URL=jdbc:h2:tcp://192.168.1.130:9092/db/portal
#log4j.appender.h2.user=sa
#log4j.appender.h2.password=kxbsnljr
#log4j.appender.h2.sql=insert into dajike_log(app, username, log_time , log_level , thread_name ,classname ,message, logger, params, url, referer, ip, node) \
#  values ('portal', '%X{username}', '%d{yyyy-MM-dd HH:mm s,SSS}', '%5p', '%t', '%C:%L','%m', '%c', '%X{params}', '%X{url}', '%X{referer}', '%X{ip}', '%X{node}')




#日志信息格式中几个符号所代表的含义：
#     -X号: X信息输出时左对齐；
#     %p: 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL,
#     %d: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
#     %r: 输出自应用启动到输出该log信息耗费的毫秒数
#     %c: 输出日志信息所属的类目，通常就是所在类的全名
#     %t: 输出产生该日志事件的线程名
#     %l: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main (TestLog4.java:10)
#     %x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。
#     %%: 输出一个"%"字符
#     %F: 输出日志消息产生时所在的文件名称
#     %L: 输出代码中的行号
#     %m: 输出代码中指定的消息,产生的日志具体信息
#     %n: 输出一个回车换行符，Windows平台为"/r/n"，Unix平台为"/n"输出日志信息换行